// Generated from src/gen/Calculator.g4 by ANTLR 4.9.0-SNAPSHOT


import { ATN } from "antlr4ts/atn/ATN";
import { ATNDeserializer } from "antlr4ts/atn/ATNDeserializer";
import { CharStream } from "antlr4ts/CharStream";
import { Lexer } from "antlr4ts/Lexer";
import { LexerATNSimulator } from "antlr4ts/atn/LexerATNSimulator";
import { NotNull } from "antlr4ts/Decorators";
import { Override } from "antlr4ts/Decorators";
import { RuleContext } from "antlr4ts/RuleContext";
import { Vocabulary } from "antlr4ts/Vocabulary";
import { VocabularyImpl } from "antlr4ts/VocabularyImpl";

import * as Utils from "antlr4ts/misc/Utils";


export class CalculatorLexer extends Lexer {
	public static readonly NUMBER = 1;
	public static readonly IDENTIFIER = 2;
	public static readonly INT = 3;
	public static readonly BOOL = 4;
	public static readonly COMMA = 5;
	public static readonly LPAREN = 6;
	public static readonly RPAREN = 7;
	public static readonly INC = 8;
	public static readonly INC2 = 9;
	public static readonly DEC = 10;
	public static readonly DEC2 = 11;
	public static readonly MMAX = 12;
	public static readonly MMIN = 13;
	public static readonly EQ = 14;
	public static readonly LESS = 15;
	public static readonly GREATER = 16;
	public static readonly NOT = 17;
	public static readonly AND = 18;
	public static readonly OR = 19;
	public static readonly WS = 20;

	// tslint:disable:no-trailing-whitespace
	public static readonly channelNames: string[] = [
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN",
	];

	// tslint:disable:no-trailing-whitespace
	public static readonly modeNames: string[] = [
		"DEFAULT_MODE",
	];

	public static readonly ruleNames: string[] = [
		"NUMBER", "IDENTIFIER", "INT", "BOOL", "COMMA", "LPAREN", "RPAREN", "INC", 
		"INC2", "DEC", "DEC2", "MMAX", "MMIN", "EQ", "LESS", "GREATER", "NOT", 
		"AND", "OR", "WS",
	];

	private static readonly _LITERAL_NAMES: Array<string | undefined> = [
		undefined, undefined, undefined, undefined, undefined, "','", "'('", "')'", 
		"'++'", "'inc'", "'--'", "'dec'", "'mmax'", "'mmin'", "'=='", "'<'", "'>'", 
		"'!'",
	];
	private static readonly _SYMBOLIC_NAMES: Array<string | undefined> = [
		undefined, "NUMBER", "IDENTIFIER", "INT", "BOOL", "COMMA", "LPAREN", "RPAREN", 
		"INC", "INC2", "DEC", "DEC2", "MMAX", "MMIN", "EQ", "LESS", "GREATER", 
		"NOT", "AND", "OR", "WS",
	];
	public static readonly VOCABULARY: Vocabulary = new VocabularyImpl(CalculatorLexer._LITERAL_NAMES, CalculatorLexer._SYMBOLIC_NAMES, []);

	// @Override
	// @NotNull
	public get vocabulary(): Vocabulary {
		return CalculatorLexer.VOCABULARY;
	}
	// tslint:enable:no-trailing-whitespace


	constructor(input: CharStream) {
		super(input);
		this._interp = new LexerATNSimulator(CalculatorLexer._ATN, this);
	}

	// @Override
	public get grammarFileName(): string { return "Calculator.g4"; }

	// @Override
	public get ruleNames(): string[] { return CalculatorLexer.ruleNames; }

	// @Override
	public get serializedATN(): string { return CalculatorLexer._serializedATN; }

	// @Override
	public get channelNames(): string[] { return CalculatorLexer.channelNames; }

	// @Override
	public get modeNames(): string[] { return CalculatorLexer.modeNames; }

	public static readonly _serializedATN: string =
		"\x03\uC91D\uCABA\u058D\uAFBA\u4F53\u0607\uEA8B\uC241\x02\x16\x85\b\x01" +
		"\x04\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06" +
		"\x04\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f\t\f\x04\r" +
		"\t\r\x04\x0E\t\x0E\x04\x0F\t\x0F\x04\x10\t\x10\x04\x11\t\x11\x04\x12\t" +
		"\x12\x04\x13\t\x13\x04\x14\t\x14\x04\x15\t\x15\x03\x02\x03\x02\x03\x02" +
		"\x05\x02/\n\x02\x03\x03\x06\x032\n\x03\r\x03\x0E\x033\x03\x03\x06\x03" +
		"7\n\x03\r\x03\x0E\x038\x03\x04\x06\x04<\n\x04\r\x04\x0E\x04=\x03\x05\x03" +
		"\x05\x03\x05\x03\x05\x03\x05\x03\x05\x03\x05\x03\x05\x03\x05\x05\x05I" +
		"\n\x05\x03\x06\x03\x06\x03\x07\x03\x07\x03\b\x03\b\x03\t\x03\t\x03\t\x03" +
		"\n\x03\n\x03\n\x03\n\x03\v\x03\v\x03\v\x03\f\x03\f\x03\f\x03\f\x03\r\x03" +
		"\r\x03\r\x03\r\x03\r\x03\x0E\x03\x0E\x03\x0E\x03\x0E\x03\x0E\x03\x0F\x03" +
		"\x0F\x03\x0F\x03\x10\x03\x10\x03\x11\x03\x11\x03\x12\x03\x12\x03\x13\x03" +
		"\x13\x03\x13\x03\x13\x03\x13\x05\x13w\n\x13\x03\x14\x03\x14\x03\x14\x03" +
		"\x14\x05\x14}\n\x14\x03\x15\x06\x15\x80\n\x15\r\x15\x0E\x15\x81\x03\x15" +
		"\x03\x15\x02\x02\x02\x16\x03\x02\x03\x05\x02\x04\x07\x02\x05\t\x02\x06" +
		"\v\x02\x07\r\x02\b\x0F\x02\t\x11\x02\n\x13\x02\v\x15\x02\f\x17\x02\r\x19" +
		"\x02\x0E\x1B\x02\x0F\x1D\x02\x10\x1F\x02\x11!\x02\x12#\x02\x13%\x02\x14" +
		"\'\x02\x15)\x02\x16\x03\x02\x05\x04\x02C\\c|\x03\x022;\x05\x02\v\f\x0F" +
		"\x0F\"\"\x02\x8C\x02\x03\x03\x02\x02\x02\x02\x05\x03\x02\x02\x02\x02\x07" +
		"\x03\x02\x02\x02\x02\t\x03\x02\x02\x02\x02\v\x03\x02\x02\x02\x02\r\x03" +
		"\x02\x02\x02\x02\x0F\x03\x02\x02\x02\x02\x11\x03\x02\x02\x02\x02\x13\x03" +
		"\x02\x02\x02\x02\x15\x03\x02\x02\x02\x02\x17\x03\x02\x02\x02\x02\x19\x03" +
		"\x02\x02\x02\x02\x1B\x03\x02\x02\x02\x02\x1D\x03\x02\x02\x02\x02\x1F\x03" +
		"\x02\x02\x02\x02!\x03\x02\x02\x02\x02#\x03\x02\x02\x02\x02%\x03\x02\x02" +
		"\x02\x02\'\x03\x02\x02\x02\x02)\x03\x02\x02\x02\x03+\x03\x02\x02\x02\x05" +
		"1\x03\x02\x02\x02\x07;\x03\x02\x02\x02\tH\x03\x02\x02\x02\vJ\x03\x02\x02" +
		"\x02\rL\x03\x02\x02\x02\x0FN\x03\x02\x02\x02\x11P\x03\x02\x02\x02\x13" +
		"S\x03\x02\x02\x02\x15W\x03\x02\x02\x02\x17Z\x03\x02\x02\x02\x19^\x03\x02" +
		"\x02\x02\x1Bc\x03\x02\x02\x02\x1Dh\x03\x02\x02\x02\x1Fk\x03\x02\x02\x02" +
		"!m\x03\x02\x02\x02#o\x03\x02\x02\x02%v\x03\x02\x02\x02\'|\x03\x02\x02" +
		"\x02)\x7F\x03\x02\x02\x02+.\x05\x07\x04\x02,-\x070\x02\x02-/\x05\x07\x04" +
		"\x02.,\x03\x02\x02\x02./\x03\x02\x02\x02/\x04\x03\x02\x02\x0202\t\x02" +
		"\x02\x0210\x03\x02\x02\x0223\x03\x02\x02\x0231\x03\x02\x02\x0234\x03\x02" +
		"\x02\x0246\x03\x02\x02\x0257\t\x03\x02\x0265\x03\x02\x02\x0278\x03\x02" +
		"\x02\x0286\x03\x02\x02\x0289\x03\x02\x02\x029\x06\x03\x02\x02\x02:<\x04" +
		"2;\x02;:\x03\x02\x02\x02<=\x03\x02\x02\x02=;\x03\x02\x02\x02=>\x03\x02" +
		"\x02\x02>\b\x03\x02\x02\x02?@\x07h\x02\x02@A\x07c\x02\x02AB\x07n\x02\x02" +
		"BC\x07u\x02\x02CI\x07g\x02\x02DE\x07v\x02\x02EF\x07t\x02\x02FG\x07w\x02" +
		"\x02GI\x07g\x02\x02H?\x03\x02\x02\x02HD\x03\x02\x02\x02I\n\x03\x02\x02" +
		"\x02JK\x07.\x02\x02K\f\x03\x02\x02\x02LM\x07*\x02\x02M\x0E\x03\x02\x02" +
		"\x02NO\x07+\x02\x02O\x10\x03\x02\x02\x02PQ\x07-\x02\x02QR\x07-\x02\x02" +
		"R\x12\x03\x02\x02\x02ST\x07k\x02\x02TU\x07p\x02\x02UV\x07e\x02\x02V\x14" +
		"\x03\x02\x02\x02WX\x07/\x02\x02XY\x07/\x02\x02Y\x16\x03\x02\x02\x02Z[" +
		"\x07f\x02\x02[\\\x07g\x02\x02\\]\x07e\x02\x02]\x18\x03\x02\x02\x02^_\x07" +
		"o\x02\x02_`\x07o\x02\x02`a\x07c\x02\x02ab\x07z\x02\x02b\x1A\x03\x02\x02" +
		"\x02cd\x07o\x02\x02de\x07o\x02\x02ef\x07k\x02\x02fg\x07p\x02\x02g\x1C" +
		"\x03\x02\x02\x02hi\x07?\x02\x02ij\x07?\x02\x02j\x1E\x03\x02\x02\x02kl" +
		"\x07>\x02\x02l \x03\x02\x02\x02mn\x07@\x02\x02n\"\x03\x02\x02\x02op\x07" +
		"#\x02\x02p$\x03\x02\x02\x02qr\x07(\x02\x02rw\x07(\x02\x02st\x07c\x02\x02" +
		"tu\x07p\x02\x02uw\x07f\x02\x02vq\x03\x02\x02\x02vs\x03\x02\x02\x02w&\x03" +
		"\x02\x02\x02xy\x07~\x02\x02y}\x07~\x02\x02z{\x07q\x02\x02{}\x07t\x02\x02" +
		"|x\x03\x02\x02\x02|z\x03\x02\x02\x02}(\x03\x02\x02\x02~\x80\t\x04\x02" +
		"\x02\x7F~\x03\x02\x02\x02\x80\x81\x03\x02\x02\x02\x81\x7F\x03\x02\x02" +
		"\x02\x81\x82\x03\x02\x02\x02\x82\x83\x03\x02\x02\x02\x83\x84\b\x15\x02" +
		"\x02\x84*\x03\x02\x02\x02\v\x02.38=Hv|\x81\x03\x02\x03\x02";
	public static __ATN: ATN;
	public static get _ATN(): ATN {
		if (!CalculatorLexer.__ATN) {
			CalculatorLexer.__ATN = new ATNDeserializer().deserialize(Utils.toCharArray(CalculatorLexer._serializedATN));
		}

		return CalculatorLexer.__ATN;
	}

}

