// Generated from src/gen/Calculator.g4 by ANTLR 4.9.0-SNAPSHOT


import { ATN } from "antlr4ts/atn/ATN";
import { ATNDeserializer } from "antlr4ts/atn/ATNDeserializer";
import { CharStream } from "antlr4ts/CharStream";
import { Lexer } from "antlr4ts/Lexer";
import { LexerATNSimulator } from "antlr4ts/atn/LexerATNSimulator";
import { NotNull } from "antlr4ts/Decorators";
import { Override } from "antlr4ts/Decorators";
import { RuleContext } from "antlr4ts/RuleContext";
import { Vocabulary } from "antlr4ts/Vocabulary";
import { VocabularyImpl } from "antlr4ts/VocabularyImpl";

import * as Utils from "antlr4ts/misc/Utils";


export class CalculatorLexer extends Lexer {
	public static readonly NUMBER = 1;
	public static readonly IDENTIFIER = 2;
	public static readonly INT = 3;
	public static readonly BOOL = 4;
	public static readonly COMMA = 5;
	public static readonly LPAREN = 6;
	public static readonly RPAREN = 7;
	public static readonly INC = 8;
	public static readonly DEC = 9;
	public static readonly MMAX = 10;
	public static readonly MMIN = 11;
	public static readonly EQ = 12;
	public static readonly LESS = 13;
	public static readonly GREATER = 14;
	public static readonly NOT = 15;
	public static readonly AND = 16;
	public static readonly OR = 17;
	public static readonly WS = 18;

	// tslint:disable:no-trailing-whitespace
	public static readonly channelNames: string[] = [
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN",
	];

	// tslint:disable:no-trailing-whitespace
	public static readonly modeNames: string[] = [
		"DEFAULT_MODE",
	];

	public static readonly ruleNames: string[] = [
		"NUMBER", "IDENTIFIER", "INT", "BOOL", "COMMA", "LPAREN", "RPAREN", "INC", 
		"DEC", "MMAX", "MMIN", "EQ", "LESS", "GREATER", "NOT", "AND", "OR", "WS",
	];

	private static readonly _LITERAL_NAMES: Array<string | undefined> = [
		undefined, undefined, undefined, undefined, undefined, "','", "'('", "')'", 
		"'++'", "'--'", "'mmax'", "'mmin'", "'=='", "'<'", "'>'", "'!'", "'&&'", 
		"'||'",
	];
	private static readonly _SYMBOLIC_NAMES: Array<string | undefined> = [
		undefined, "NUMBER", "IDENTIFIER", "INT", "BOOL", "COMMA", "LPAREN", "RPAREN", 
		"INC", "DEC", "MMAX", "MMIN", "EQ", "LESS", "GREATER", "NOT", "AND", "OR", 
		"WS",
	];
	public static readonly VOCABULARY: Vocabulary = new VocabularyImpl(CalculatorLexer._LITERAL_NAMES, CalculatorLexer._SYMBOLIC_NAMES, []);

	// @Override
	// @NotNull
	public get vocabulary(): Vocabulary {
		return CalculatorLexer.VOCABULARY;
	}
	// tslint:enable:no-trailing-whitespace


	constructor(input: CharStream) {
		super(input);
		this._interp = new LexerATNSimulator(CalculatorLexer._ATN, this);
	}

	// @Override
	public get grammarFileName(): string { return "Calculator.g4"; }

	// @Override
	public get ruleNames(): string[] { return CalculatorLexer.ruleNames; }

	// @Override
	public get serializedATN(): string { return CalculatorLexer._serializedATN; }

	// @Override
	public get channelNames(): string[] { return CalculatorLexer.channelNames; }

	// @Override
	public get modeNames(): string[] { return CalculatorLexer.modeNames; }

	public static readonly _serializedATN: string =
		"\x03\uC91D\uCABA\u058D\uAFBA\u4F53\u0607\uEA8B\uC241\x02\x14r\b\x01\x04" +
		"\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06\x04" +
		"\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f\t\f\x04\r\t\r" +
		"\x04\x0E\t\x0E\x04\x0F\t\x0F\x04\x10\t\x10\x04\x11\t\x11\x04\x12\t\x12" +
		"\x04\x13\t\x13\x03\x02\x03\x02\x03\x02\x05\x02+\n\x02\x03\x03\x06\x03" +
		".\n\x03\r\x03\x0E\x03/\x03\x03\x06\x033\n\x03\r\x03\x0E\x034\x03\x04\x06" +
		"\x048\n\x04\r\x04\x0E\x049\x03\x05\x03\x05\x03\x05\x03\x05\x03\x05\x03" +
		"\x05\x03\x05\x03\x05\x03\x05\x05\x05E\n\x05\x03\x06\x03\x06\x03\x07\x03" +
		"\x07\x03\b\x03\b\x03\t\x03\t\x03\t\x03\n\x03\n\x03\n\x03\v\x03\v\x03\v" +
		"\x03\v\x03\v\x03\f\x03\f\x03\f\x03\f\x03\f\x03\r\x03\r\x03\r\x03\x0E\x03" +
		"\x0E\x03\x0F\x03\x0F\x03\x10\x03\x10\x03\x11\x03\x11\x03\x11\x03\x12\x03" +
		"\x12\x03\x12\x03\x13\x06\x13m\n\x13\r\x13\x0E\x13n\x03\x13\x03\x13\x02" +
		"\x02\x02\x14\x03\x02\x03\x05\x02\x04\x07\x02\x05\t\x02\x06\v\x02\x07\r" +
		"\x02\b\x0F\x02\t\x11\x02\n\x13\x02\v\x15\x02\f\x17\x02\r\x19\x02\x0E\x1B" +
		"\x02\x0F\x1D\x02\x10\x1F\x02\x11!\x02\x12#\x02\x13%\x02\x14\x03\x02\x05" +
		"\x04\x02C\\c|\x03\x022;\x05\x02\v\f\x0F\x0F\"\"\x02w\x02\x03\x03\x02\x02" +
		"\x02\x02\x05\x03\x02\x02\x02\x02\x07\x03\x02\x02\x02\x02\t\x03\x02\x02" +
		"\x02\x02\v\x03\x02\x02\x02\x02\r\x03\x02\x02\x02\x02\x0F\x03\x02\x02\x02" +
		"\x02\x11\x03\x02\x02\x02\x02\x13\x03\x02\x02\x02\x02\x15\x03\x02\x02\x02" +
		"\x02\x17\x03\x02\x02\x02\x02\x19\x03\x02\x02\x02\x02\x1B\x03\x02\x02\x02" +
		"\x02\x1D\x03\x02\x02\x02\x02\x1F\x03\x02\x02\x02\x02!\x03\x02\x02\x02" +
		"\x02#\x03\x02\x02\x02\x02%\x03\x02\x02\x02\x03\'\x03\x02\x02\x02\x05-" +
		"\x03\x02\x02\x02\x077\x03\x02\x02\x02\tD\x03\x02\x02\x02\vF\x03\x02\x02" +
		"\x02\rH\x03\x02\x02\x02\x0FJ\x03\x02\x02\x02\x11L\x03\x02\x02\x02\x13" +
		"O\x03\x02\x02\x02\x15R\x03\x02\x02\x02\x17W\x03\x02\x02\x02\x19\\\x03" +
		"\x02\x02\x02\x1B_\x03\x02\x02\x02\x1Da\x03\x02\x02\x02\x1Fc\x03\x02\x02" +
		"\x02!e\x03\x02\x02\x02#h\x03\x02\x02\x02%l\x03\x02\x02\x02\'*\x05\x07" +
		"\x04\x02()\x070\x02\x02)+\x05\x07\x04\x02*(\x03\x02\x02\x02*+\x03\x02" +
		"\x02\x02+\x04\x03\x02\x02\x02,.\t\x02\x02\x02-,\x03\x02\x02\x02./\x03" +
		"\x02\x02\x02/-\x03\x02\x02\x02/0\x03\x02\x02\x0202\x03\x02\x02\x0213\t" +
		"\x03\x02\x0221\x03\x02\x02\x0234\x03\x02\x02\x0242\x03\x02\x02\x0245\x03" +
		"\x02\x02\x025\x06\x03\x02\x02\x0268\x042;\x0276\x03\x02\x02\x0289\x03" +
		"\x02\x02\x0297\x03\x02\x02\x029:\x03\x02\x02\x02:\b\x03\x02\x02\x02;<" +
		"\x07h\x02\x02<=\x07c\x02\x02=>\x07n\x02\x02>?\x07u\x02\x02?E\x07g\x02" +
		"\x02@A\x07v\x02\x02AB\x07t\x02\x02BC\x07w\x02\x02CE\x07g\x02\x02D;\x03" +
		"\x02\x02\x02D@\x03\x02\x02\x02E\n\x03\x02\x02\x02FG\x07.\x02\x02G\f\x03" +
		"\x02\x02\x02HI\x07*\x02\x02I\x0E\x03\x02\x02\x02JK\x07+\x02\x02K\x10\x03" +
		"\x02\x02\x02LM\x07-\x02\x02MN\x07-\x02\x02N\x12\x03\x02\x02\x02OP\x07" +
		"/\x02\x02PQ\x07/\x02\x02Q\x14\x03\x02\x02\x02RS\x07o\x02\x02ST\x07o\x02" +
		"\x02TU\x07c\x02\x02UV\x07z\x02\x02V\x16\x03\x02\x02\x02WX\x07o\x02\x02" +
		"XY\x07o\x02\x02YZ\x07k\x02\x02Z[\x07p\x02\x02[\x18\x03\x02\x02\x02\\]" +
		"\x07?\x02\x02]^\x07?\x02\x02^\x1A\x03\x02\x02\x02_`\x07>\x02\x02`\x1C" +
		"\x03\x02\x02\x02ab\x07@\x02\x02b\x1E\x03\x02\x02\x02cd\x07#\x02\x02d " +
		"\x03\x02\x02\x02ef\x07(\x02\x02fg\x07(\x02\x02g\"\x03\x02\x02\x02hi\x07" +
		"~\x02\x02ij\x07~\x02\x02j$\x03\x02\x02\x02km\t\x04\x02\x02lk\x03\x02\x02" +
		"\x02mn\x03\x02\x02\x02nl\x03\x02\x02\x02no\x03\x02\x02\x02op\x03\x02\x02" +
		"\x02pq\b\x13\x02\x02q&\x03\x02\x02\x02\t\x02*/49Dn\x03\x02\x03\x02";
	public static __ATN: ATN;
	public static get _ATN(): ATN {
		if (!CalculatorLexer.__ATN) {
			CalculatorLexer.__ATN = new ATNDeserializer().deserialize(Utils.toCharArray(CalculatorLexer._serializedATN));
		}

		return CalculatorLexer.__ATN;
	}

}

